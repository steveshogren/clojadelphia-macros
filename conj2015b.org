* Not going to sell you on Clojure
** If you are here, you probably don't need to be sold!
** This talk is about preparing _yourself_
*** after they say yes
* Intro (3 min)
** How many of you are using Clojure professionally?
** How many _want to_ use it professionally?
** Leave your hands up if you feel ready to train your team on Monday?
* Here is my story
** Preparation
*** 3 years ago - "Knew pretty well"
*** Asked "should we use Clojure" - said "no" 
**** lots of unknowns, didn't want responsibility, blame
*** Started to learn for 2.5 years
**** 400 hours of clojure/scheme
**** Worked through SICP
**** 2 university courses
**** Gave Talks At Local Clojure Meetup
** Setting the Stage: what we needed, why we picked Clojure
*** Had to be JVM, Ruby, Node - preferably JVM
*** We had JS, Ruby, Java, Scala, Clojure, C#
No real overlaps
*** I offered to train in Clojure
**** Everyone seemed comfortable with that
*** No one asked or cared waht we wrote it in mostly
** We succeeded, built another product with it, and then a third recently
* I will give you steps to prepare yourself to train others
* Five Suggestions - Week 1 is far more important than week 10
** Have Empathy - Impostor Syndrome
*** "You are probably thinking, empthy, what does tht have to do with clojure?"
*** Put yourself in their shoes
**** What intimidates you: sales, marketing, cold calls, child care?
**** Would you feel shortchanged if job changed?
**** Some devs find learning a new language to be just as intimidating
**** Some would feel like their career is wasted, thrown away
**** Its just a new syntax
**** "If they are afraid, they dont know that"
*** Everyone else is already super uncomfortable
** Energize On Highest Value Per Minute Parts
*** REPL Workflow
*** World Class Unit Testing
*** 80/20 Test Time Dependent Typing with typeshaping via Schema
*** NOT Brevity
*** NOT World Class Parallelism
** Compromise on everything
*** Everyone else is uncomfortable, what uncomfortable things are you willing to do?
**** Different editors
**** Different shortcuts
**** Being the "floater" to answer questions
**** Pair programming
*** Make everything easy
**** My Roughest Edges
***** No standard lein profile or profiles.clj
***** Poor understanding of clojure deployment
***** Using EMACS with non-standard setup (Evil, ParEdit)
***** Poor understanding of compojure/ring/friend workflows and OAuth
***** No real documentation of architecture
**** Provide Style Guide
**** Build up foundational parts of the system
** Separate your ego
*** Everything is your fault!
**** Accept All Trash talk
***** Yes, sometimes Clojure sucks and X easier in Y
*** They will look for ways to put the language down to feel better
**** Me with Ruby/ Zipzip/Gems/Bundle
**** Come to their aid
** Be Prepared
*** HAVE TO PREPARE Due Diligence
**** You need to be prepared to lead
*** Daily guided warm up katas
* Conclusion
** These are the steps that I believe made our project successful
** Still using Clojure today
** Convincing Coworkers
** Happy to discuss and help any way I can
** Thanks!

* Original Submission

Teaching Clojure at IBM

We had a month till the industry conference. It had to run on JVM. We are a .NET
shop. We tallied the team's skills other than C#: Ruby, Java, Python, PHP,
Scala, Perl, and Clojure. Not a single overlapping language between us.

"Who would feel comfortable having to train everyone else?"

I put myself forward for Clojure. A month later we shipped.

Here's the report of how I became confident enough to suggest Clojure as an
option and then train the rest of the team. I'll cover the skills and attitudes
that I believe made the project a success. I'll also make suggestions for what
can reduce the friction of introducing Clojure at your company.

Outline: 


Bio

I am a software engineer, writer, and dev manager. I co-organize Clojadelphia,
the Philadelphia Clojure meetup. I author the development blog Deliberate
Software, where I write about Clojure, F#, and skills for new developers.

I have a passion for training and learning. I previously worked as a middle
school teacher, then later as a developer trainer. I've found Clojure to be the
tool that gives me the longest lever between my skill and the problem, so it is
the tool I grab for first. Therefore, most of my teaching these days is around
Clojure.
